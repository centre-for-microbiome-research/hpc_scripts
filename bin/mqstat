#!/usr/bin/env python3
"""
Cluster Usage Monitor

This script analyzes PBS node information and job statistics to provide a summary of:
1. Overall cluster resource usage with ASCII art visualization
2. Nodes running at high CPU/RAM/GPU utilization (>80%)
3. Current user's resource consumption
4. Resource usage by all users in the "microbiome" group
"""

import subprocess
import re
import os
import pwd
import grp
import sys
from collections import defaultdict

# ANSI color codes
class Colors:
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def run_command(command):
    """Execute a shell command and return the output."""
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    if process.returncode != 0:
        print(f"Error executing command: {command}")
        print(stderr.decode('utf-8'))
        return None
    return stdout.decode('utf-8')

def parse_pbsnodeinfo():
    """Parse pbsnodeinfo output to get node resource usage data."""
    output = run_command("pbsnodeinfo")
    if not output:
        return []
    
    nodes = []
    # Updated pattern to match the actual pbsnodeinfo output format
    cpu_pattern = re.compile(r'^(\S+)\s+:.*?;\s*(\d+)\s*/\s*(\d+)\s*cpus;\s*(\d+)\s*/\s*(\d+)\s*GB')
    # New GPU pattern that matches the format in the example
    gpu_pattern = re.compile(r';\s*(\d+)\s*/\s*(\d+)\s*gpus')
    
    for line in output.splitlines():
        # Skip header lines
        if "Node" in line or "===" in line:
            continue
            
        cpu_match = cpu_pattern.search(line)
        if cpu_match:
            node_name = cpu_match.group(1)
            used_cpu = int(cpu_match.group(2))
            total_cpu = int(cpu_match.group(3))
            used_mem = int(cpu_match.group(4))
            total_mem = int(cpu_match.group(5))
            
            # Calculate usage percentages
            cpu_percentage = (used_cpu / total_cpu * 100) if total_cpu > 0 else 0
            mem_percentage = (used_mem / total_mem * 100) if total_mem > 0 else 0
            
            # Check for GPUs - look for the gpu usage pattern
            gpu_match = gpu_pattern.search(line)
            used_gpu = 0
            total_gpu = 0
            gpu_percentage = 0
            
            if gpu_match:
                used_gpu = int(gpu_match.group(1))
                total_gpu = int(gpu_match.group(2))
                gpu_percentage = (used_gpu / total_gpu * 100) if total_gpu > 0 else 0
            
            nodes.append({
                'name': node_name,
                'cpu_usage': cpu_percentage,
                'ram_usage': mem_percentage,
                'gpu_usage': gpu_percentage,
                'used_cpu': used_cpu,
                'total_cpu': total_cpu,
                'used_mem': used_mem,
                'total_mem': total_mem,
                'used_gpu': used_gpu,
                'total_gpu': total_gpu,
                'state': 'free' if used_cpu == 0 else 'job-busy'
            })
    
    return nodes

def parse_pbsnodes_output():
    """Parse the output of `pbsnodes -a` into structured resource usage data."""
    output = run_command("pbsnodes -a")
    if not output:
        raise Exception("Failed to run pbsnodes -a")
    nodes = []
    current_node = {}
    node_name = None

    for line in output.splitlines():
        if not line.strip():  # empty line signifies possible end of a node block
            if current_node and node_name:
                nodes.append(current_node)
                current_node = {}
                node_name = None
            continue

        if not line.startswith(" "):  # new node
            if current_node and node_name:
                nodes.append(current_node)
                current_node = {}
            node_name = line.strip()
            current_node["name"] = node_name
            current_node["used_cpu"] = 0
            current_node["total_cpu"] = 0
            current_node["used_mem"] = 0
            current_node["total_mem"] = 0
            current_node["used_gpu"] = 0
            current_node["total_gpu"] = 0
            current_node["state"] = "unknown"
            continue

        line = line.strip()
        if line.startswith("resources_available.ncpus"):
            current_node["total_cpu"] = int(line.split("=")[-1].strip())
        elif line.startswith("resources_assigned.ncpus"):
            current_node["used_cpu"] = int(line.split("=")[-1].strip())
        elif line.startswith("resources_available.mem"):
            kb = int(line.split("=")[-1].strip().replace("kb", ""))
            current_node["total_mem"] = kb // (1024 * 1024)  # convert to GB
        elif line.startswith("resources_assigned.mem"):
            kb = int(line.split("=")[-1].strip().replace("kb", ""))
            current_node["used_mem"] = kb // (1024 * 1024)  # convert to GB
        elif line.startswith("resources_available.ngpus"):
            current_node["total_gpu"] = int(line.split("=")[-1].strip())
        elif line.startswith("resources_assigned.ngpus"):
            current_node["used_gpu"] = int(line.split("=")[-1].strip())
        elif line.startswith("state"):
            current_node["state"] = line.split("=")[-1].strip()

    # Append last node if needed
    if current_node and node_name:
        nodes.append(current_node)

    # Post-processing for percentages
    for node in nodes:
        total_cpu = node["total_cpu"]
        total_mem = node["total_mem"]
        total_gpu = node["total_gpu"]
        used_cpu = node["used_cpu"]
        used_mem = node["used_mem"]
        used_gpu = node["used_gpu"]

        node["cpu_usage"] = (used_cpu / total_cpu * 100) if total_cpu else 0
        node["ram_usage"] = (used_mem / total_mem * 100) if total_mem else 0
        node["gpu_usage"] = (used_gpu / total_gpu * 100) if total_gpu else 0

        # Derive state
        node["state"] = "free" if used_cpu == 0 else "job-busy"

    return nodes

def parse_qstat():
    """Parse qstat output to get job information."""
    # Full format for detailed information
    # Add -t to expand job arrays into individual jobs
    output = run_command("qstat -f -t")
    if not output:
        return []
    
    jobs = []
    current_job = None
    
    for line in output.splitlines():
        # Match job ID line
        job_match = re.match(r'^Job Id: (.+)$', line)
        if job_match:
            if current_job:
                jobs.append(current_job)
            current_job = {'id': job_match.group(1), 'user': None, 'ncpus': 0, 'cpu_usage': 0, 'mem_usage': 0, 'gpu_usage': 0, 'state': None}
            continue
            
        if not current_job:
            continue

        # Match queue
        queue_match = re.search(r'queue = (.+)', line)
        if queue_match:
            current_job['queue'] = queue_match.group(1)
            
        # Match job owner
        owner_match = re.search(r'Job_Owner = (.+)@', line)
        if owner_match:
            current_job['user'] = owner_match.group(1)
            
        # Match job state
        state_match = re.search(r'job_state = ([A-Z])', line)
        if state_match:
            current_job['state'] = state_match.group(1)
            
        # Match resource usage
        if 'resources_used' in line or 'Resource_List' in line:
            # CPU time - not right since e.g. not shown for queued jobs
            # cpu_match = re.search(r'resources_used.cput = (\d+):(\d+):(\d+)', line)
            # if cpu_match:
            #     h, m, s = map(int, cpu_match.groups())
            #     current_job['cpu_usage'] = h * 3600 + m * 60 + s

            # ncpus
            cpu_match = re.search(r'Resource_List.ncpus = (\d+)', line)
            if cpu_match:
                current_job['ncpus'] = int(cpu_match.group(1))

            # CPU percentage
            cpu_match = re.search(r'resources_used.cpupercent = (\d+)', line)
            if cpu_match:
                current_job['cpupercent'] = int(cpu_match.group(1))
                
            # Memory usage
            if 'resources_used.mem' in line:
                mem_match1 = re.search(r'resources_used.mem = (\d+)kb', line)
                mem_match2 = re.search(r'resources_used.mem = (\d+)gb', line)
                mem_match3 = re.search(r'resources_used.mem = 0b', line)
                if mem_match1:
                    current_job['mem_usage'] = int(mem_match1.group(1))
                elif mem_match2:
                    current_job['mem_usage'] = int(mem_match2.group(1)) * 1024 * 1024
                elif mem_match3:
                    current_job['mem_usage'] = 0
                else:
                    raise Exception("Unknown memory unit from line: " + line)
                
            # GPU
            gpu_match = re.search(r'Resource_List.ngpus = (\d+)', line)
            if gpu_match:
                current_job['ngpus'] = int(gpu_match.group(1))

            # walltime
            walltime_match = re.search(r'resources_used.walltime = (\d+):(\d+):(\d+)', line)
            if walltime_match:
                h, m, s = map(int, walltime_match.groups())
                current_job['walltime_used'] = h * 3600 + m * 60 + s

            # Requested walltime
            walltime_match = re.search(r'Resource_List.walltime = (\d+):(\d+):(\d+)', line)
            if walltime_match:
                h, m, s = map(int, walltime_match.groups())
                requested_walltime = h * 3600 + m * 60 + s
                # Deduct the time already used, if already running
                if 'walltime_used' in current_job:
                    current_job['walltime'] = requested_walltime - current_job['walltime_used']
                else:
                    current_job['walltime'] = requested_walltime
                # The true cpu time ncpus * walltime
                current_job['cpu_usage_remaining'] = current_job['ncpus'] * current_job['walltime']
                # gpus
                if 'ngpus' in current_job:
                    current_job['gpu_usage_remaining'] = current_job['ngpus'] * current_job['walltime']
    
    # Add the last job
    if current_job:
        jobs.append(current_job)
        
    return jobs

def get_job_status_counts(jobs):
    """Count jobs by status (running, queued, held)."""
    status_counts = defaultdict(int)
    
    for job in jobs:
        state = job.get('state')
        if state == 'R':
            status_counts['running'] += 1
        elif state == 'Q':
            status_counts['queued'] += 1
        elif state == 'H':
            status_counts['held'] += 1
        else:
            status_counts['other'] += 1
    
    total = sum(status_counts.values())
    running_percent = (status_counts['running'] / total * 100) if total > 0 else 0
    
    return {
        'running': status_counts['running'],
        'queued': status_counts['queued'],
        'held': status_counts['held'],
        'other': status_counts['other'],
        'total': total,
        'running_percent': running_percent
    }

def get_unix_group_members(group_name):
    """Get all users belonging to a Unix group."""
    try:
        group = grp.getgrnam(group_name)
        return group.gr_mem
    except KeyError:
        print(f"Group '{group_name}' not found")
        return []

def get_real_name(username):
    """Get the real name for a username."""
    try:
        pwd_entry = pwd.getpwnam(username)
        gecos = pwd_entry.pw_gecos
        real_name = gecos.split(',')[0] if gecos else username
        return real_name if real_name else username
    except KeyError:
        return username

def calculate_cluster_stats(nodes):
    """Calculate summary statistics about cluster usage."""
    total_nodes = len(nodes)
    active_nodes = sum(1 for node in nodes if node['used_cpu'] > 0)
    
    high_cpu_nodes = sum(1 for node in nodes if node['cpu_usage'] >= 80)
    high_ram_nodes = sum(1 for node in nodes if node['ram_usage'] >= 80)
    high_gpu_nodes = sum(1 for node in nodes if node['gpu_usage'] >= 80 and node['total_gpu'] > 0)
    
    total_cpu_cores = sum(node['total_cpu'] for node in nodes)
    used_cpu_cores = sum(node['used_cpu'] for node in nodes)
    
    total_memory_gb = sum(node['total_mem'] for node in nodes)
    used_memory_gb = sum(node['used_mem'] for node in nodes)
    
    total_gpus = sum(node['total_gpu'] for node in nodes)
    used_gpus = sum(node['used_gpu'] for node in nodes)
    
    avg_cpu = sum(node['cpu_usage'] for node in nodes) / total_nodes if total_nodes else 0
    avg_ram = sum(node['ram_usage'] for node in nodes) / total_nodes if total_nodes else 0
    
    # Only include nodes with GPUs in the GPU averages
    gpu_nodes = sum(1 for node in nodes if node['total_gpu'] > 0)
    avg_gpu = sum(node['gpu_usage'] for node in nodes if node['total_gpu'] > 0) / gpu_nodes if gpu_nodes else 0
    
    return {
        'total_nodes': total_nodes,
        'active_nodes': active_nodes,
        'high_cpu_nodes': high_cpu_nodes,
        'high_cpu_percentage': (high_cpu_nodes / total_nodes * 100) if total_nodes else 0,
        'high_ram_nodes': high_ram_nodes,
        'high_ram_percentage': (high_ram_nodes / total_nodes * 100) if total_nodes else 0,
        'high_gpu_nodes': high_gpu_nodes,
        'high_gpu_percentage': (high_gpu_nodes / gpu_nodes * 100) if gpu_nodes else 0,
        'avg_cpu': avg_cpu,
        'avg_ram': avg_ram,
        'avg_gpu': avg_gpu,
        'total_cpu_cores': total_cpu_cores,
        'used_cpu_cores': used_cpu_cores,
        'cpu_utilization': (used_cpu_cores / total_cpu_cores * 100) if total_cpu_cores else 0,
        'total_memory_gb': total_memory_gb,
        'used_memory_gb': used_memory_gb,
        'memory_utilization': (used_memory_gb / total_memory_gb * 100) if total_memory_gb else 0,
        'total_gpus': total_gpus,
        'used_gpus': used_gpus,
        'gpu_utilization': (used_gpus / total_gpus * 100) if total_gpus else 0
    }

def calculate_user_stats(jobs, user=None, group_members=None, ignore_interactive=False):
    """Calculate statistics for a specific user or group."""
    if ignore_interactive:
        jobs = [job for job in jobs if not job['queue'] in ('cpu_inter_exec','gpu_inter_exec')]
    if user:
        user_jobs = [job for job in jobs if job['user'] == user]
    elif group_members:
        user_jobs = [job for job in jobs if job['user'] in group_members]
    else:
        return None
    
    job_status = get_job_status_counts(user_jobs)
    total_jobs = len(user_jobs)
    total_cpu = sum(job['cpu_usage_remaining'] for job in user_jobs)
    total_mem = sum(job['mem_usage'] for job in user_jobs)
    total_gpu = sum(job['gpu_usage'] for job in user_jobs)
    running_cpu = sum(job['ncpus'] for job in user_jobs if job['state'] == 'R')
    running_gpu = sum(job['ngpus'] for job in user_jobs if job['state'] == 'R')
    total_ncpus = sum(job['ncpus'] for job in user_jobs)
    total_ngpus = sum(job['ngpus'] for job in user_jobs)
    total_walltime = sum(job['walltime'] for job in user_jobs)

    # already a %
    # Sometimes get R but no 'cpupercent' key, I guess they are just starting?
    running_cpu_util_total = sum(job['cpupercent'] for job in user_jobs if job['state'] == 'R' and 'cpupercent' in job)
    running_cpu_utilisation = running_cpu_util_total / running_cpu if len(user_jobs) > 0 and running_cpu > 0 else 0

    # speed is roughly running cpus/ Total is cpu_usage_remaining
    eta = total_cpu / running_cpu if running_cpu > 0 else 0
    
    return {
        'job_status': job_status,
        'total_jobs': total_jobs,
        'total_cpu_seconds': total_cpu,
        'total_cpu_hours': total_cpu / 3600,
        'total_memory_kb': total_mem,
        'total_memory_gb': total_mem / (1024 * 1024),
        'total_gpus': total_gpu,
        'avg_cpu_per_job': total_cpu / total_jobs if total_jobs else 0,
        'avg_mem_per_job': total_mem / total_jobs if total_jobs else 0,
        'avg_gpu_per_job': total_gpu / total_jobs if total_jobs else 0,
        'running_cpu': running_cpu,
        'running_gpu': running_gpu,
        'total_ncpus': total_ncpus,
        'total_ngpus': total_ngpus,
        'total_walltime': total_walltime,
        'eta': eta,
        'running_cpu_utilisation': running_cpu_utilisation,
    }

def format_time_hours(seconds, descriptor=""):
    """Format seconds into hours, days, months, years or millenia."""
    hours = seconds / 3600
    descriptor = f" {descriptor}" if descriptor else ""
    if hours >= 876000:  # 1 millenia = 876000 hours
        millenia = hours / 876000
        return f"{millenia:.1f}{descriptor} millenia"
    elif hours >= 8760:  # 1 year = 8760 hours
        years = hours / 8760
        return f"{years:.1f}{descriptor} years"
    elif hours >= 730:  # 1 month = 730 hours (approx)
        months = hours / 730
        return f"{months:.1f}{descriptor} months"
    elif hours >= 24:
        days = hours / 24
        return f"{days:.1f}{descriptor} days"
    else:
        return f"{hours:.1f}{descriptor} hours"

def create_ascii_bar(percentage, width=40, reverse=False, colour_text=None):
    """Create an ASCII progress bar with color based on percentage."""
    filled_width = int(percentage / 100 * width)
    empty_width = width - filled_width
    
    if reverse:
        if percentage < 40:
            color = Colors.RED
        elif percentage < 70:
            color = Colors.YELLOW
        else:
            color = Colors.GREEN
    else:
        if percentage < 50:
            color = Colors.GREEN
        elif percentage < 80:
            color = Colors.YELLOW
        else:
            color = Colors.RED

    bar = f"{color}{'█' * filled_width}{Colors.ENDC}{'░' * empty_width} {percentage:.1f}%"
    if colour_text:
        bar = coloured_text(colour_text, color) + bar
    
    return bar

def coloured_text(text, color):
    """Apply color to text."""
    return f"{color}{text}{Colors.ENDC}"

def main():
    # parse -u option from args
    if len(sys.argv) > 1 and sys.argv[1] == '-u':
        current_user = sys.argv[2]
    else:
        # Get current username
        current_user = os.getlogin()

    current_user_real_name = get_real_name(current_user)
    
    # Get node data
    nodes = parse_pbsnodes_output()
    
    if not nodes:
        print("Failed to gather node information. Check if pbsnodeinfo is available.")
        return
    
    # Calculate cluster stats
    cluster_stats = calculate_cluster_stats(nodes)
    
    # Get job data
    jobs = parse_qstat()
    
    if not jobs:
        print("Failed to gather job information. Check if qstat is available.")
        return
    
    # Get overall job status
    overall_job_status = get_job_status_counts(jobs)
    
    # Get microbiome group members
    microbiome_members = get_unix_group_members("microbiome")
    # skip admins
    microbiome_members = [member for member in microbiome_members if member not in [
        'thomsonv',
    ]]
    
    # Calculate user stats
    user_stats = calculate_user_stats(jobs, user=current_user, ignore_interactive=True)
    group_stats = calculate_user_stats(jobs, group_members=microbiome_members)
    
    print("\n=== YOU ===")
    if user_stats and user_stats['total_jobs'] > 0:
        job_status = user_stats['job_status']
        # ETA
        print(f"ETA: {format_time_hours(user_stats['eta'])}")
        print(f"Walltime remaining: {format_time_hours(user_stats['total_walltime'])}")
        print(f"CPU hours remaining: {format_time_hours(user_stats['total_cpu_seconds'])}")
        print()
        print(f"Jobs: {job_status['running']} of {job_status['total']} running")
        # print(f"Run:   {create_ascii_bar(job_status['running_percent'], reverse=True)}")
        print(f"{create_ascii_bar(job_status['running_percent'], reverse=True, colour_text='Run:   ')}")
        print(f"{create_ascii_bar(user_stats['running_cpu_utilisation'], reverse=True, colour_text='Util:  ')}")

        if job_status['held'] > 0:
            print(f"Jobs held: {job_status['held']} !!")

        # print(f"Jobs: {job_status['total']} total ({job_status['running']} running, {job_status['queued']} queued, {job_status['held']} held, {job_status['running_percent']:.1f}% running)")
        # print(f"CPU:   {create_ascii_bar(user_stats['running_cpu'] / user_stats['total_ncpus'] * 100)}")
        # if user_stats['total_gpus'] > 0:
        #     print(f"GPU:   {create_ascii_bar(user_stats['running_gpu'] / cluster_stats['total_gpus'] * 100)}")
        # print(f"Total memory usage: {user_stats['total_memory_gb']:.2f} GB")
        # if user_stats['total_gpus'] > 0:
        #     print(f"Total GPU usage: {user_stats['total_gpus']} GPUs")
    else:
        print(f"No batch jobs found for user: {current_user_real_name}")
    
    print("\n\n=== CMR ===")
    if group_stats and group_stats['total_jobs'] > 0:
        # Calculate the fraction of cluster resources currently being used by the microbiome group
        # For running jobs, not the total jobs
        microbiome_running_jobs = [job for job in jobs if job['user'] in microbiome_members and job.get('state') == 'R']
        
        # Calculate current CPU usage percentage (relative to total cluster CPU cores)
        microbiome_used_cpu = sum(job['ncpus'] for job in microbiome_running_jobs)
        microbiome_cpu_percent = microbiome_used_cpu / cluster_stats['total_cpu_cores'] * 100
        
        # Calculate current memory usage percentage (relative to total cluster memory)
        microbiome_used_mem = sum(job['mem_usage'] for job in microbiome_running_jobs)
        microbiome_mem_percent = (microbiome_used_mem / (1024 * 1024)) / cluster_stats['total_memory_gb'] * 100
        
        # Calculate current GPU usage percentage (relative to total cluster GPUs)
        microbiome_used_gpu = sum(job['ngpus'] for job in microbiome_running_jobs)
        microbiome_gpu_percent = microbiome_used_gpu / cluster_stats['total_gpus'] * 100 if cluster_stats['total_gpus'] > 0 else 0
        
        print(f"CPU:   {create_ascii_bar(microbiome_cpu_percent)}")
        print(f"RAM:   {create_ascii_bar(microbiome_mem_percent)}")
        if cluster_stats['total_gpus'] > 0 and microbiome_used_gpu > 0:
            print(f"GPU:   {create_ascii_bar(microbiome_gpu_percent)}")
        print(f"Requested CPU hours: {format_time_hours(group_stats['total_cpu_seconds'])}")
        print(f"{create_ascii_bar(group_stats['running_cpu_utilisation'], reverse=True, colour_text='Util:  ')}")
        
        job_status = group_stats['job_status']
        print()
        print(f"Jobs: {job_status['running']} of {job_status['total']} running")
        print(f"Run:   {create_ascii_bar(job_status['running_percent'])}")

        # print(f"\nJobs: {job_status['total']} total ({job_status['running']} running, {job_status['queued']} queued, {job_status['held']} held, {job_status['running_percent']:.1f}% running)")
        # print(f"Requested memory usage: {group_stats['total_memory_gb']:.2f} GB")
        # if group_stats['total_gpus'] > 0:
        #     print(f"Total GPU usage: {group_stats['total_gpus']} GPUs")
        
        # Calculate individual stats for group members
        member_stats = {}
        for member in microbiome_members:
            member_jobs = [job for job in jobs if job['user'] == member and job['queue'] not in ('cpu_inter_exec','gpu_inter_exec')]
            if member_jobs:
                member_job_status = get_job_status_counts(member_jobs)
                cpu_seconds = sum(job['cpu_usage_remaining'] for job in member_jobs)
                mem_kb = sum(job['mem_usage'] for job in member_jobs)
                mem_kb_total = sum(job['mem_usage'] * job['walltime'] for job in member_jobs)
                gpu_count = sum(job['ngpus'] for job in member_jobs)
                gpu_count_total = sum(job['gpu_usage_remaining'] for job in member_jobs)
                # Calculate score using cpu*8+ram where cpu is in hours and ram in GB
                score = (cpu_seconds / 3600) * 8 + (mem_kb_total / (1024 * 1024)) + (gpu_count_total * 10)
                real_name = get_real_name(member)
                member_stats[member] = {
                    'real_name': real_name,
                    'jobs': member_job_status,
                    'cpu_seconds': cpu_seconds,
                    'mem_kb': mem_kb,
                    'gpu_count': gpu_count,
                    'score': score
                }
        
        # Print top users from microbiome group by score
        if member_stats:
            print("\nBatch job scoreboard:")  # Just a newline before top users
            top_users = sorted(member_stats.items(), key=lambda x: x[1]['score'], reverse=True, )[:5]
            for i, (username, stats) in enumerate(top_users, 1):
                job_status = stats['jobs']
                gpu_info = f"{stats['gpu_count']} GPUs, " if stats['gpu_count'] > 0 else ""
                print(f"{i}. {stats['real_name']}: "#Score: {stats['score']:.2f}, "
                      f"{format_time_hours(stats['cpu_seconds'], 'CPU')}, "
                      f"{gpu_info}"
                      f"{job_status['total']} jobs ({job_status['running_percent']:.1f}% running)")
        else:
            print("No active jobs found for microbiome group members")
    else:
        print("No active jobs found for microbiome group members")

    # Print the report
    print("\n\n=== CLUSTER ===")
    
    # ASCII art utilization bars
    print(f"CPU:   {create_ascii_bar(cluster_stats['cpu_utilization'])}")
    print(f"RAM:   {create_ascii_bar(cluster_stats['memory_utilization'])}")
    if cluster_stats['total_gpus'] > 0:
        print(f"GPU:   {create_ascii_bar(cluster_stats['gpu_utilization'])}")
    print(f'Nodes: {create_ascii_bar(cluster_stats["active_nodes"]/cluster_stats["total_nodes"]*100)}')
    print()
    
    # print(f"\nTotal nodes: {cluster_stats['total_nodes']}")
    # print(f"Active nodes: {cluster_stats['active_nodes']} ({cluster_stats['active_nodes']/cluster_stats['total_nodes']*100:.1f}%)")
    # print(f"CPU utilization: {cluster_stats['cpu_utilization']:.1f}%")
    # print(f"Memory utilization: {cluster_stats['memory_utilization']:.1f}%")
    # if cluster_stats['total_gpus'] > 0:
    #     print(f"GPU utilization: {cluster_stats['gpu_utilization']:.1f}%")
    
    # print(f"Nodes with high CPU (>80%): {cluster_stats['high_cpu_nodes']} ({cluster_stats['high_cpu_percentage']:.1f}%)")
    # print(f"Nodes with high RAM (>80%): {cluster_stats['high_ram_nodes']} ({cluster_stats['high_ram_percentage']:.1f}%)")
    # if cluster_stats['total_gpus'] > 0:
    #     print(f"Nodes with high GPU (>80%): {cluster_stats['high_gpu_nodes']} ({cluster_stats['high_gpu_percentage']:.1f}%)")
    
    # print("\n=== JOB STATUS SUMMARY ===")
    print(f"Jobs: {overall_job_status['running']} of {overall_job_status['total']} running")
    print(f"Run:   {create_ascii_bar(overall_job_status['running_percent'])}")
    # print(f"Running: {overall_job_status['running']} ({overall_job_status['running_percent']:.1f}%)")
    # print(f"Queued: {overall_job_status['queued']}")
    # print(f"Held: {overall_job_status['held']}")
    # if overall_job_status['other'] > 0:
    #     print(f"Other states: {overall_job_status['other']}")

    # Num cpus, total ram, gpus
    ram_tb = cluster_stats['total_memory_gb'] / 1024
    print(f"\nTotal {cluster_stats['total_cpu_cores']} CPUs, {ram_tb:.1f} TB RAM, {cluster_stats['total_gpus']} GPUs")

    print()

if __name__ == "__main__":
    main()