#!/usr/bin/env python3
"""
Cluster Usage Monitor

This script analyzes PBS node information and job statistics to provide a summary of:
1. Overall cluster resource usage
2. Nodes running at high CPU/RAM utilization (>80%)
3. Current user's resource consumption
4. Resource usage by all users in the "microbiome" group
"""

import subprocess
import re
import os
import pwd
import grp
from collections import defaultdict

def run_command(command):
    """Execute a shell command and return the output."""
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    if process.returncode != 0:
        print(f"Error executing command: {command}")
        print(stderr.decode('utf-8'))
        return None
    return stdout.decode('utf-8')

def parse_pbsnodeinfo():
    """Parse pbsnodeinfo output to get node resource usage data."""
    output = run_command("pbsnodeinfo")
    if not output:
        return []
    
    nodes = []
    pattern = re.compile(r'^(\S+)\s+:.*?;\s*(\d+)\s*/\s*(\d+)\s*cpus;\s*(\d+)\s*/\s*(\d+)\s*GB')
    
    for line in output.splitlines():
        # Skip header lines
        if "Node" in line or "===" in line:
            continue
            
        match = pattern.search(line)
        if match:
            node_name = match.group(1)
            used_cpu = int(match.group(2))
            total_cpu = int(match.group(3))
            used_mem = int(match.group(4))
            total_mem = int(match.group(5))
            
            # Calculate usage percentages
            cpu_percentage = (used_cpu / total_cpu * 100) if total_cpu > 0 else 0
            mem_percentage = (used_mem / total_mem * 100) if total_mem > 0 else 0
            
            nodes.append({
                'name': node_name,
                'cpu_usage': cpu_percentage,
                'ram_usage': mem_percentage,
                'used_cpu': used_cpu,
                'total_cpu': total_cpu,
                'used_mem': used_mem,
                'total_mem': total_mem,
                'state': 'free' if used_cpu == 0 else 'job-busy'
            })
    
    return nodes

def parse_qstat():
    """Parse qstat output to get job information."""
    # Full format for detailed information
    output = run_command("qstat -f")
    if not output:
        return []
    
    jobs = []
    current_job = None
    
    for line in output.splitlines():
        # Match job ID line
        job_match = re.match(r'^Job Id: (.+)$', line)
        if job_match:
            if current_job:
                jobs.append(current_job)
            current_job = {'id': job_match.group(1), 'user': None, 'cpu_usage': 0, 'mem_usage': 0, 'state': None}
            continue
            
        if not current_job:
            continue
            
        # Match job owner
        owner_match = re.search(r'Job_Owner = (.+)@', line)
        if owner_match:
            current_job['user'] = owner_match.group(1)
            
        # Match job state
        state_match = re.search(r'job_state = ([A-Z])', line)
        if state_match:
            current_job['state'] = state_match.group(1)
            
        # Match resource usage
        if 'resources_used' in line:
            # CPU time
            cpu_match = re.search(r'resources_used.cput = (\d+):(\d+):(\d+)', line)
            if cpu_match:
                h, m, s = map(int, cpu_match.groups())
                current_job['cpu_usage'] = h * 3600 + m * 60 + s
                
            # Memory usage
            mem_match = re.search(r'resources_used.mem = (\d+)kb', line)
            if mem_match:
                current_job['mem_usage'] = int(mem_match.group(1))
    
    # Add the last job
    if current_job:
        jobs.append(current_job)
        
    return jobs

def get_job_status_counts(jobs):
    """Count jobs by status (running, queued, held)."""
    status_counts = defaultdict(int)
    
    for job in jobs:
        state = job.get('state')
        if state == 'R':
            status_counts['running'] += 1
        elif state == 'Q':
            status_counts['queued'] += 1
        elif state == 'H':
            status_counts['held'] += 1
        else:
            status_counts['other'] += 1
    
    total = sum(status_counts.values())
    running_percent = (status_counts['running'] / total * 100) if total > 0 else 0
    
    return {
        'running': status_counts['running'],
        'queued': status_counts['queued'],
        'held': status_counts['held'],
        'other': status_counts['other'],
        'total': total,
        'running_percent': running_percent
    }

def get_unix_group_members(group_name):
    """Get all users belonging to a Unix group."""
    try:
        group = grp.getgrnam(group_name)
        return group.gr_mem
    except KeyError:
        print(f"Group '{group_name}' not found")
        return []

def get_real_name(username):
    """Get the real name for a username."""
    try:
        pwd_entry = pwd.getpwnam(username)
        gecos = pwd_entry.pw_gecos
        real_name = gecos.split(',')[0] if gecos else username
        return real_name if real_name else username
    except KeyError:
        return username

def calculate_cluster_stats(nodes):
    """Calculate summary statistics about cluster usage."""
    total_nodes = len(nodes)
    active_nodes = sum(1 for node in nodes if node['used_cpu'] > 0)
    
    high_cpu_nodes = sum(1 for node in nodes if node['cpu_usage'] >= 80)
    high_ram_nodes = sum(1 for node in nodes if node['ram_usage'] >= 80)
    
    total_cpu_cores = sum(node['total_cpu'] for node in nodes)
    used_cpu_cores = sum(node['used_cpu'] for node in nodes)
    
    total_memory_gb = sum(node['total_mem'] for node in nodes)
    used_memory_gb = sum(node['used_mem'] for node in nodes)
    
    avg_cpu = sum(node['cpu_usage'] for node in nodes) / total_nodes if total_nodes else 0
    avg_ram = sum(node['ram_usage'] for node in nodes) / total_nodes if total_nodes else 0
    
    return {
        'total_nodes': total_nodes,
        'active_nodes': active_nodes,
        'high_cpu_nodes': high_cpu_nodes,
        'high_cpu_percentage': (high_cpu_nodes / total_nodes * 100) if total_nodes else 0,
        'high_ram_nodes': high_ram_nodes,
        'high_ram_percentage': (high_ram_nodes / total_nodes * 100) if total_nodes else 0,
        'avg_cpu': avg_cpu,
        'avg_ram': avg_ram,
        'total_cpu_cores': total_cpu_cores,
        'used_cpu_cores': used_cpu_cores,
        'cpu_utilization': (used_cpu_cores / total_cpu_cores * 100) if total_cpu_cores else 0,
        'total_memory_gb': total_memory_gb,
        'used_memory_gb': used_memory_gb,
        'memory_utilization': (used_memory_gb / total_memory_gb * 100) if total_memory_gb else 0
    }

def calculate_user_stats(jobs, user=None, group_members=None):
    """Calculate statistics for a specific user or group."""
    if user:
        user_jobs = [job for job in jobs if job['user'] == user]
    elif group_members:
        user_jobs = [job for job in jobs if job['user'] in group_members]
    else:
        return None
    
    job_status = get_job_status_counts(user_jobs)
    total_jobs = len(user_jobs)
    total_cpu = sum(job['cpu_usage'] for job in user_jobs)
    total_mem = sum(job['mem_usage'] for job in user_jobs)
    
    return {
        'job_status': job_status,
        'total_jobs': total_jobs,
        'total_cpu_seconds': total_cpu,
        'total_cpu_hours': total_cpu / 3600,
        'total_memory_kb': total_mem,
        'total_memory_gb': total_mem / (1024 * 1024),
        'avg_cpu_per_job': total_cpu / total_jobs if total_jobs else 0,
        'avg_mem_per_job': total_mem / total_jobs if total_jobs else 0
    }

def format_time_hours(seconds):
    """Format seconds into hours or days."""
    hours = seconds / 3600
    if hours >= 24:
        days = hours / 24
        return f"{days:.2f} days"
    else:
        return f"{hours:.2f} hours"

def main():
    # Get current username
    current_user = os.getlogin()
    current_user_real_name = get_real_name(current_user)
    
    # print("\n=== CLUSTER USAGE MONITOR ===\n")
    
    # Get node data
    # print("Collecting node information...")
    nodes = parse_pbsnodeinfo()
    
    if not nodes:
        print("Failed to gather node information. Check if pbsnodeinfo is available.")
        return
    
    # Calculate cluster stats
    cluster_stats = calculate_cluster_stats(nodes)
    
    # Get job data
    # print("Collecting job information...")
    jobs = parse_qstat()
    
    if not jobs:
        print("Failed to gather job information. Check if qstat is available.")
        return
    
    # Get overall job status
    overall_job_status = get_job_status_counts(jobs)
    
    # Get microbiome group members
    microbiome_members = get_unix_group_members("microbiome")
    
    # Calculate user stats
    user_stats = calculate_user_stats(jobs, user=current_user)
    group_stats = calculate_user_stats(jobs, group_members=microbiome_members)
    
    # Print the report
    print("\n=== CLUSTER UTILIZATION SUMMARY ===")
    print(f"Total nodes: {cluster_stats['total_nodes']}")
    print(f"Active nodes: {cluster_stats['active_nodes']} ({cluster_stats['active_nodes']/cluster_stats['total_nodes']*100:.1f}%)")
    print(f"Total CPU cores: {cluster_stats['total_cpu_cores']}")
    print(f"Used CPU cores: {cluster_stats['used_cpu_cores']} ({cluster_stats['cpu_utilization']:.1f}%)")
    print(f"Total memory: {cluster_stats['total_memory_gb']} GB")
    print(f"Used memory: {cluster_stats['used_memory_gb']} GB ({cluster_stats['memory_utilization']:.1f}%)")
    print(f"Nodes with high CPU (>80%): {cluster_stats['high_cpu_nodes']} ({cluster_stats['high_cpu_percentage']:.1f}%)")
    print(f"Nodes with high RAM (>80%): {cluster_stats['high_ram_nodes']} ({cluster_stats['high_ram_percentage']:.1f}%)")
    
    print("\n=== JOB STATUS SUMMARY ===")
    print(f"Total jobs: {overall_job_status['total']}")
    print(f"Running: {overall_job_status['running']} ({overall_job_status['running_percent']:.1f}%)")
    print(f"Queued: {overall_job_status['queued']}")
    print(f"Held: {overall_job_status['held']}")
    if overall_job_status['other'] > 0:
        print(f"Other states: {overall_job_status['other']}")
    
    print("\n=== YOUR RESOURCE USAGE ===")
    if user_stats and user_stats['total_jobs'] > 0:
        # print(f"User: {current_user_real_name}")
        job_status = user_stats['job_status']
        print(f"Jobs: {job_status['total']} total ({job_status['running']} running, {job_status['queued']} queued, {job_status['held']} held, {job_status['running_percent']:.1f}% running)")
        print(f"Total CPU time: {format_time_hours(user_stats['total_cpu_seconds'])}")
        print(f"Total memory usage: {user_stats['total_memory_gb']:.2f} GB")
    else:
        print(f"No active jobs found for user: {current_user_real_name}")
    
    print("\n=== MICROBIOME GROUP USAGE ===")
    if group_stats and group_stats['total_jobs'] > 0:
        # Get real names for group members
        # real_names = [f"{get_real_name(member)} ({member})" for member in microbiome_members]
        # print(f"Group members: {', '.join(real_names)}")
        job_status = group_stats['job_status']
        print(f"Jobs: {job_status['total']} total ({job_status['running']} running, {job_status['queued']} queued, {job_status['held']} held, {job_status['running_percent']:.1f}% running)")
        print(f"Total CPU time: {format_time_hours(group_stats['total_cpu_seconds'])}")
        print(f"Total memory usage: {group_stats['total_memory_gb']:.2f} GB")
        
        # Calculate individual stats for group members
        member_stats = {}
        for member in microbiome_members:
            member_jobs = [job for job in jobs if job['user'] == member]
            if member_jobs:
                member_job_status = get_job_status_counts(member_jobs)
                cpu_seconds = sum(job['cpu_usage'] for job in member_jobs)
                mem_kb = sum(job['mem_usage'] for job in member_jobs)
                # Calculate score using cpu*8+ram where cpu is in hours and ram in GB
                score = (cpu_seconds / 3600) * 8 + (mem_kb / (1024 * 1024))
                real_name = get_real_name(member)
                member_stats[member] = {
                    'real_name': real_name,
                    'jobs': member_job_status,
                    'cpu_seconds': cpu_seconds,
                    'mem_kb': mem_kb,
                    'score': score
                }
        
        # Print top users from microbiome group by score
        # print("\n=== TOP MICROBIOME GROUP USERS BY RESOURCE USAGE ===")
        # print("(Ranked by score: CPU hours × 8 + RAM GB)")
        if member_stats:
            print()
            top_users = sorted(member_stats.items(), key=lambda x: x[1]['score'], reverse=True)
            for i, (username, stats) in enumerate(top_users, 1):
                job_status = stats['jobs']
                print(f"{i}. {stats['real_name']}: "#Score: {stats['score']:.2f}, "
                      f"CPU: {format_time_hours(stats['cpu_seconds'])}, "
                      f"RAM: {stats['mem_kb']/(1024*1024):.2f} GB, "
                      f"Jobs: {job_status['total']} ({job_status['running_percent']:.1f}% running)")
        else:
            print("No active jobs found for microbiome group members")
    else:
        print("No active jobs found for microbiome group members")

if __name__ == "__main__":
    main()