import os
import pandas as pd
from os.path import join

"""
Update config.yaml
Ensure that the dorado_exec path points to the dorado executable.
Run 'snakemake --scheduler greedy --cores 32 --use-conda --profile mqsub-lyra --configfile config.yaml'
"""

dorado = config["dorado_exec"]
outfolder = config["output_dir"]
models_directory = config["models_directory"]

# Create necessary directories
os.makedirs(join(outfolder,'logs'), exist_ok=True)
os.makedirs(join(outfolder,'basecalled'), exist_ok=True)

# Read POD5 file list
pod5_files = pd.DataFrame(columns=["pod_id", "filepath"])
with open(config["pod5_sample_list"]) as r:
    for filepath in r:
        pod5_files = pd.concat([pod5_files, pd.DataFrame({"pod_id": [os.path.basename(filepath.strip())], "filepath": [filepath.strip()]})])

wildcard_constraints:
    podfile = r".+\.pod5"  # Ensure the wildcard matches valid POD5 filenames

rule all:
    input:
        join(outfolder, "demux.done"),
        join(outfolder, "final_fastq.done")

rule dorado_basecaller:
    input:
        pod5_file = lambda wildcards: pod5_files[pod5_files["pod_id"] == wildcards.podfile].iloc[0]["filepath"]
    params:
        model = "sup",
        base_mods = "4mC_5mC 6mA", # from nanomotif preprint - note that it has changed between versions
        kit_name = "SQK-NBD114-24"
    output:
        temp(join(outfolder, "basecalled", "{podfile}.bam"))
    log:
        join(outfolder, "logs", "{podfile}.log")
    threads: 6
    resources:
        mem_mb=64*1024, # Having (possibly unrelated problems) using 8G
        gpus=1,
        runtime=24*60*2
    shell:
        "bash -c 'nvidia-smi 1>&2 && {dorado} basecaller {params.model} {input.pod5_file} --modified-bases {params.base_mods} --kit-name {params.kit_name} --models-directory {models_directory} > {output}' 2> {log}"

rule dorado_demux:
    input:
        bam_files = expand(join(outfolder, "basecalled/{pod_id}.bam"), pod_id=pod5_files["pod_id"])
    params:
        options = "--no-classify",
    output:
        outfolder = directory(join(outfolder, "final_bamfiles")),
        done = touch(join(outfolder, "demux.done"))
    log:
        join(outfolder, "logs", "demux.log")
    conda:
        "envs/samtools.yml"
    threads: 1
    resources:
        mem_mb=8*1024, # guess work
        runtime=12*60, # 12 hours - more than enough I think
        gpus=1, # Possible it might work in CPU mode, but doesn't at least of the box.
    shell:
        "samtools merge -u - {input.bam_files} | {dorado} demux - {params.options} --output-dir {output.outfolder} 2> {log}"

rule generate_fastq:
    input:
        bam_folder = join(outfolder, "final_bamfiles"),
        done = join(outfolder, "demux.done")
    output:
        fastq_folder = directory(join(outfolder, "fastq")),
        done = touch(join(outfolder, "final_fastq.done"))
    log:
        join(outfolder, "logs", "generate_fastq.log")
    conda:
        "envs/samtools.yml"
    threads: 8
    resources:
        mem_mb=8*1024, # guesswork
        runtime=4*60 # 4 hours should be enough
    shell:
        """
        mkdir -p {output.fastq_folder}
        for bam_file in {input.bam_folder}/*.bam; do
            base=$(basename "$bam_file" .bam)
            samtools fastq -@ {threads} "$bam_file" | pigz -p {threads} > {output.fastq_folder}/"$base".fastq.gz
        done
        """
